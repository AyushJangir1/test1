{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Documents\\\\GitHub\\\\Hostel_Management_System\\\\src\\\\context\\\\Web3Context.jsx\\\\Web3Context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Web3Context = /*#__PURE__*/createContext();\nconst {\n  ethereum\n} = window;\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isWallet, setIsWallet] = useState(false);\n  const [connectedAccount, setConnectedAccount] = useState('');\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      // if(!ethereum) return alert(\"Please install metamask\")\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      }); //   console.log(accounts)\n\n      if (accounts.length) {\n        setConnectedAccount(accounts[0]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install Metamask\");\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // console.log(accounts);\n      // window.localStorage.setItem(\"wallets\", accounts)\n\n      setIsWallet(true);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  });\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      connectWallet,\n      isWallet,\n      connectedAccount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ContextProvider, \"3zoSM6GnckQmOLE0wdGhUjiVwLY=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/ayush/Documents/GitHub/Hostel_Management_System/src/context/Web3Context.jsx/Web3Context.jsx"],"names":["createContext","useEffect","useState","Web3Context","ethereum","window","ContextProvider","children","isWallet","setIsWallet","connectedAccount","setConnectedAccount","checkIfWalletIsConnected","accounts","request","method","length","error","console","connectWallet","alert"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,EAAjC;AACP,MAAM;AAAEI,EAAAA;AAAF,IAAeC,MAArB;AAEA,OAAO,MAAMC,eAAe,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAC7C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,gBAAD,EAAmBC,mBAAnB,IAA0CT,QAAQ,CAAC,EAAD,CAAxD;;AAEA,QAAMU,wBAAwB,GAAG,YAAY;AAC3C,QAAI;AAEA;AAEA,YAAMC,QAAQ,GAAG,MAAMT,QAAQ,CAACU,OAAT,CAAiB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAjB,CAAvB,CAJA,CAKA;;AACA,UAAGF,QAAQ,CAACG,MAAZ,EAAmB;AACfL,QAAAA,mBAAmB,CAACE,QAAQ,CAAC,CAAD,CAAT,CAAnB;AACH;AACJ,KATD,CASE,OAAOI,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACF,GAbD;;AAgBA,QAAME,aAAa,GAAG,YAAY;AAChC,QAAG;AACC,UAAG,CAACf,QAAJ,EAAc,OAAOgB,KAAK,CAAC,yBAAD,CAAZ;AAEd,YAAMP,QAAQ,GAAG,MAAMR,MAAM,CAACD,QAAP,CAAgBU,OAAhB,CAAwB;AAC3CC,QAAAA,MAAM,EAAE;AADmC,OAAxB,CAAvB,CAHD,CAMC;AACA;;AACAN,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KATD,CASE,OAAOQ,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACF,GAbD;;AAeAhB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,wBAAwB;AACzB,GAFQ,CAAT;AAIA,sBACA,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACO,MAAAA,aAAD;AAAgBX,MAAAA,QAAhB;AAA0BE,MAAAA;AAA1B,KAA7B;AAAA,cACKH;AADL;AAAA;AAAA;AAAA;AAAA,UADA;AAKD,CA5CM;;GAAMD,e;;KAAAA,e","sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\n\r\nexport const Web3Context = createContext()\r\nconst { ethereum } = window\r\n\r\nexport const ContextProvider = ({children}) => {\r\n  const [isWallet, setIsWallet] = useState(false)\r\n  const [connectedAccount, setConnectedAccount] = useState('')\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n        \r\n        // if(!ethereum) return alert(\"Please install metamask\")\r\n        \r\n        const accounts = await ethereum.request({method: 'eth_accounts'})\r\n        //   console.log(accounts)\r\n        if(accounts.length){\r\n            setConnectedAccount(accounts[0])\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n  }\r\n\r\n\r\n  const connectWallet = async () => {\r\n    try{\r\n        if(!ethereum) return alert(\"Please install Metamask\")\r\n        \r\n        const accounts = await window.ethereum.request({\r\n            method: \"eth_requestAccounts\",\r\n        });\r\n        // console.log(accounts);\r\n        // window.localStorage.setItem(\"wallets\", accounts)\r\n        setIsWallet(true)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected()\r\n  })\r\n\r\n  return(\r\n  <Web3Context.Provider value={{connectWallet, isWallet, connectedAccount}}>\r\n      {children}\r\n  </Web3Context.Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}